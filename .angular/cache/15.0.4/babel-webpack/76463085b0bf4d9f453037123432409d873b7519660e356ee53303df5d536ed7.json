{"ast":null,"code":"import { HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { throwError as observableThrowError } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class ResponseInterceptor {\n  constructor(router) {\n    this.router = router;\n  }\n  intercept(req, next) {\n    return next.handle(req).pipe(tap(event => {\n      if (event instanceof HttpResponse) {\n        const response = event.body;\n        // if (event.status === 200) {\n        //     this.toastr.info('Request Completed');\n        // }\n      }\n    }), catchError((error, caught) => {\n      if (error instanceof HttpErrorResponse && error.status === 400) {\n        // this.toastr.error(error.error, 'Oops!!');\n        console.error(error);\n        return observableThrowError(error);\n      }\n      if (error instanceof HttpErrorResponse && error.status === 401) {\n        console.error(error);\n        return observableThrowError(error);\n      }\n      if (error instanceof HttpErrorResponse && error.status === 403) {\n        console.error(error);\n        return observableThrowError(error);\n      }\n      if (error instanceof HttpErrorResponse && error.status === 404) {\n        console.error(error);\n        this.router.navigateByUrl('/auth/login');\n        return observableThrowError(error);\n      }\n      if (error instanceof HttpErrorResponse && error.status === 500) {\n        console.error(error);\n        return observableThrowError(error);\n      }\n      if (error instanceof HttpErrorResponse && error.message === 'Http failure response for (unknown url): 0 Unknown Error') {\n        if (error.status === 0) {\n          sessionStorage.clear();\n        } else {\n          sessionStorage.clear();\n        }\n      }\n      return observableThrowError(error);\n    }));\n  }\n}\nResponseInterceptor.ɵfac = function ResponseInterceptor_Factory(t) {\n  return new (t || ResponseInterceptor)(i0.ɵɵinject(i1.Router));\n};\nResponseInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ResponseInterceptor,\n  factory: ResponseInterceptor.ɵfac\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}